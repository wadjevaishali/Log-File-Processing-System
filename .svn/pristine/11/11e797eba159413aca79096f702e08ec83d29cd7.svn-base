package com.logfileprocessing;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.DirectoryStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.List;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingQueue;

public class LogFileProcessorPnC {

	private static BlockingQueue<List<String>> sharedQueue1 = new LinkedBlockingQueue<List<String>>();
	private static BlockingQueue<List<String>> sharedQueue2 = new LinkedBlockingQueue<List<String>>();

	private static int count = 1;

	public static void main(String[] args) {
		try (DirectoryStream<Path> directoryStream = Files
				.newDirectoryStream(Paths.get("E:\\LogFiles"))) {

			ExecutorService ProdExecutor = Executors.newFixedThreadPool(3);
			for (Path path : directoryStream) {
				ProdExecutor.execute(new Runnable() {

					@Override
					public void run() {
						producer(path);
					}
				});
			}

			ProdExecutor.shutdown();

			ExecutorService ProcExecutor = Executors.newSingleThreadExecutor();
			ProcExecutor.execute(new Runnable() {

				@Override
				public void run() {
					processor();
				}
			});

			ProcExecutor.shutdown();

			ExecutorService consExecutor = Executors.newFixedThreadPool(3);
			for (Path path : directoryStream) {
				consExecutor.execute(new Runnable() {

					@Override
					public void run() {
						consumer(path);
					}
				});
			}

		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	private static void producer(Path path) {
		try {
			List<String> readLines = Files.readAllLines(path,
					StandardCharsets.UTF_8);
			try {
				sharedQueue1.put(readLines);
				System.out.println(path + " is reading.");
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	private static void processor() {

		while (true) {			
			List<String> lines = null;
			try {
				lines = sharedQueue1.take();
				System.out.println("processing.");
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			for (int i = 0; i < lines.size(); i++) {
				StringBuilder sb = new StringBuilder();
				lines.set(i, sb.append(count++).append(".")
						.append(lines.get(i)).toString());
			}
			try {
				sharedQueue2.put(lines);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}

	private static void consumer(Path path) {
		while (true) {
			try {
				try {
					System.out.println(path + " is writing.");
					Files.write(path, sharedQueue2.take(),
							StandardOpenOption.CREATE);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

}
